---
// Parallax Background Section Component
export interface Props {
  backgroundImage?: string;
  overlayOpacity?: number;
  children?: any;
}

const { 
  backgroundImage = '/alexandra.jpg', 
  overlayOpacity = 0.7 
} = Astro.props;
---

<section class="parallax-container">
  <div 
    class="parallax-bg"
    style={`background-image: url(${backgroundImage});`}
  ></div>
  
  <div class="parallax-overlay" style={`opacity: ${overlayOpacity};`}></div>
  
  <div class="parallax-content">
    <slot />
  </div>
</section>

<style>
  .parallax-container {
    position: relative;
    min-height: 60vh;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .parallax-bg {
    position: absolute;
    top: -20%;
    left: -20%;
    width: 140%;
    height: 140%;
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    will-change: transform;
    transform: translateZ(0);
  }
  
  .parallax-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, 
      rgba(74, 144, 226, 0.8) 0%, 
      rgba(149, 213, 178, 0.6) 100%);
    z-index: 1;
  }
  
  .parallax-content {
    position: relative;
    z-index: 2;
    text-align: center;
    color: white;
    padding: 2rem;
    max-width: 800px;
  }
  
  /* Disable parallax on mobile for performance */
  @media (max-width: 768px) {
    .parallax-bg {
      background-attachment: scroll;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
  }
  
  /* Reduce motion for accessibility */
  @media (prefers-reduced-motion: reduce) {
    .parallax-bg {
      background-attachment: scroll;
      transform: none;
    }
  }
</style>

<script>
  // Smooth parallax effect
  function initParallax() {
    const parallaxElements = document.querySelectorAll('.parallax-bg');
    
    function updateParallax() {
      parallaxElements.forEach((element) => {
        const rect = element.closest('.parallax-container')?.getBoundingClientRect();
        if (!rect) return;
        
        const speed = 0.5;
        const yPos = -(rect.top * speed);
        element.style.transform = `translate3d(0, ${yPos}px, 0)`;
      });
    }
    
    // Use requestAnimationFrame for smooth performance
    let ticking = false;
    function requestTick() {
      if (!ticking) {
        requestAnimationFrame(updateParallax);
        ticking = true;
        setTimeout(() => { ticking = false; }, 16);
      }
    }
    
    // Only add scroll listener if not reduced motion
    if (!window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
      window.addEventListener('scroll', requestTick, { passive: true });
    }
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initParallax);
  } else {
    initParallax();
  }
</script>